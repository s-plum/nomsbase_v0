var mongoose = require('mongoose');var notFoundError = { error: 'Not found.' };exports.add = function(db) {	return function(req, res) {		db.collection('counters').findAndModify(		{"_id": "recipeid"}, [], {$inc: {"seq": 1}}, {}		, function(err, doc) {			if (!doc) {				req.body['recipeid'] = new Date().getTime();			}			else {				req.body['recipeid'] = doc.seq;			}			db.collection('recipes').insert(req.body, function(err, doc) {				if (err || doc.length === 0) {					res.send(err);				}				else {					res.send(doc[0]);				}			});		});			}}exports.update = function(db) {	return function(req, res) {		var collection = db.collection('recipes');		if (typeof req.body._id == 'string') {			req.body._id = mongoose.Types.ObjectId(req.body._id);		}		collection.save(req.body, function(err, type, response) {			if (err) {				res.send(err);			}			else {				res.send(response);			}		});	}}exports.get = function(db) {	return function(req, res) {		var collection = db.collection('recipes');		collection.find({recipeid: parseInt(req.params.id)}).toArray(function(err, results) {			if (err || results.length === 0) {				res.send(notFoundError);			}			else {				if (results.length > 0) {					res.send(results[0]);				}			}		})	}}exports.search = function(db) {	return function(req, res) {		var regex = req.params.query;		if (req.params.query.indexOf('+') >= 0) {			var regex = new RegExp(req.params.query.split('+').join('|'));		}		db.collection('recipes').find({ $or: [				{ 					name: {						$regex: regex,						$options: 'i'					}				},				{					"ingredientGroups.ingredients.type": {						$regex: regex,						$options: 'i'					}				},				{					tags: {						$in: [req.params.query]					}				}			]}).toArray(function(err, results) {			if (err) {				res.send(notFoundError);			}			else {				res.send(results);			}		})	}}exports.getRandom = function(db) {	return function(req, res) {		db.collection('recipes').count(function(err, count) {			if (err || count === 0) {				res.send(notFoundError);			}			var rand = Math.floor(Math.random() * (count - 1));			db.collection('recipes').find().limit(-1).skip(rand).nextObject(function(err, result) {				if (err || !result || !result.recipeid) {					res.send(notFoundError);				}				res.send({recipeid:result.recipeid})			});		});	}}