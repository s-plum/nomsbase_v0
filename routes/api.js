var mongoose = require('mongoose');exports.add = function(db) {	return function(req, res) {		db.collection('counters').findAndModify(		{"_id": "recipeid"}, [], {$inc: {"seq": 1}}, {}		, function(err, doc) {			if (!doc) {				req.body['recipeid'] = new Date().getTime();			}			else {				req.body['recipeid'] = doc.seq;			}			db.collection('recipes').insert(req.body, function(err, doc) {				if (err) {					res.send('shit!');				}				else {					res.send('OK');				}			});		});			}}exports.update = function(db) {	return function(req, res) {		var collection = db.collection('recipes');		if (typeof req.body._id == 'string') {			req.body._id = mongoose.Types.ObjectId(req.body._id);		}		collection.save(req.body, function(err, type, response) {			if (err) {				res.send('shit');			}			else {				res.send('OK');			}		});	}}exports.get = function(db) {	return function(req, res) {		var collection = db.collection('recipes');		collection.find({recipeid: parseInt(req.params.id)}).toArray(function(err, results) {			if (err || results.length === 0) {				res.send({error: 'Not found.'});			}			else {				if (results.length > 0) {					res.send(results[0]);				}			}		})	}}exports.search = function(db) {	return function(req, res) {		var collection = db.collection('recipes');		collection.find({ $or: [{name: {$regex: req.params.query, $options: 'i'}},{"ingredientGroups.ingredients.type" : {$regex: req.params.query, $options: 'i'}},{tags: {$in: [req.params.query]}}]}).toArray(function(err, results) {			if (err) {				res.send('shit!');			}			else {				res.send(results);			}		})	}}exports.getRandom = function(db) {	return function(req, res) {		var collection = db.collection('counters');		collection.find({ _id: 'recipeid' }).toArray(function(err, results) {			if (err || results.length !== 1) {				res.send('shit!');			}			else {				var recipeCount = results[0].seq;				var random = Math.floor(Math.random() * (recipeCount - 1));				res.send({recipeid:random});			}		})	}}